Character Controller API:

Set up an actor:
	Actor *cct_actor(ENTITY *parent, VECTOR *size, VECTOR *offset);
This function would create a new CCT and sets up all initialization stuff.

Remove an actor with this:
	void cct_remove(Actor *actor);
Just removes all actor entitys and quits the actors update loop.

The Actor struct:
typedef struct Actor {
	var speed;
	var runningFactor;	// How much faster do we run?
	var strafeFactor;	// How much faster do we strafe?
	var crawlFactor;	// How much faster do we crawl?
	var jumpStrength;	// How high do we jump?
	var maxRotSpeed;	// Max. character rotation speed.
	int flags;			// Explained below
	
	// internal use:
	ENTITY *bbox;		// The physic bbox
	VECTOR offset;		// Offset of the chars origin
	VECTOR size;		// Size of the model
	[...]				// Other stuff used to control an actor
} Actor;

Actor::flags:
	ACTOR_CRAWL_RUN			-	Allows running in crawl mode
	ACTOR_NO_JUMP			-	Disables jumping
	ACTOR_ALLOW_REJUMP		-	Actor jumps again when landing on the ground
	ACTOR_ALLOW_MULTIJUMP	-	Jumping has no ground check
	ACTOR_NO_AIRCONTROL		-	Actor can't change speed in air
	[...]

Actor control:
	void cct_set_input(Actor *actor, int state, int value);
Sets an input value for the actor.
state:
	CCT_WALK	-	Walk forward (>0), stand (=0), walk backwards (<0)
	CCT_STRAFE	-	Strafe left (>0), stand (=0), strafe right (<0)
	CCT_RUN		-	Actor runs (!=0), actor walks (=0)
	CCT_CRAWL	-	Actor crawls (!=0), actor stands (=0)
	CCT_JUMP	-	Actor starts jumping if (!=0)

	void cct_rotate(Actor *actor, var rotation);
Rotates the actor about a relative angle and limits the rotation speed to Actor::maxRotSpeed.

	int cct_get_input(Actor *actor, int state)
Returns the value of an actors input state.

	void cct_get_position(Actor *actor, VECTOR *pos);
Gets the position of an actor into the vector.

	var cct_get_rotation(Actor *actor);
Gets the rotation of an actor.

	void cct_update(Actor *actor);
Updates the actor and performs all moving, jumping, ...

	void cct_set_event(Actor *actor, int eventID, EVENT eventHandler);
Sets an event handler for the given actor event.
eventID:
	CCT_EVENT_WALL			-	CCT walks against wall
	CCT_EVENT_BEGIN_FALL	- 	CCT starts to fall
	CCT_EVENT_END_FALL		-	CCT lands on the ground
	CCT_EVENT_END_JUMP		-	CCT lands on the ground after a jump
cct event handler will look like this:
	void cct_event(Actor *actor, int eventID, void *eventInfo);
eventInfo can contain information about the event happened (like fall height or similar)

Basic usage of the CCT:
action char()
{
	Actor *actor = cct_actor(me, vector(40, 40, 80), vector(0, 0, 0));
	while(me)
	{
		cct_set_input(actor, CCT_WALK, key_w - key_s);
		cct_set_input(actor, CCT_STRAFE, key_a - key_d);
		cct_set_input(actor, CCT_RUN, key_shift);
		cct_set_input(actor, CCT_CRAWL, key_ctrl);
		cct_set_input(actor, CCT_JUMP, key_space);
		cct_rotate(actor, 4 * mouse_force.y * time_step);
		
		cct_update(actor);
		
		cct_get_position(actor, my.x);
		my.pan = cct_get_rotation(actor);
		
		wait(1);
	}
}